inside fetchServiceData.gs

function fetchServiceData(coNo) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("service1"); // Name of the sheet
  const data = sheet.getDataRange().getValues();

  // Create an array to hold the matched data
  const matchedData = data.filter(row => row[2] === coNo); // Filter based on column C (Co.No)

  // If a match is found, return the first match only
  if (matchedData.length > 0) {
    return {
      date: matchedData[0][0], // Column A (Date)
      model: matchedData[0][1], // Column B (Model)
      hour: matchedData[0][3], // Column D (Hour)
      type: matchedData[0][4] // Column E (Type)
    };
  }
  return null; // No match found
}


inside Utils.gs 

function fetchRowsByPlateSelection(selectedValue) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("service1"); // Name of the sheet
  const data = sheet.getDataRange().getValues();
Logger.log("selectedValue");
    Logger.log(selectedValue);
  // Filter the rows where column C (index 2) matches the value, excluding the header row
  const filteredRows = data.slice(1).filter(row => row[2] === selectedValue);
   Logger.log("filteredRows");
    Logger.log(filteredRows);
  
 const headers = ["DATE", "MODEL", "PLATE/CO.NO", "HOUR", "TYPE"];
  // Convert the filtered rows into a map-like structure
  Logger.log("headers");
    Logger.log(headers);
  const data1 = filteredRows.map(row => {
    const rowMap = {};
    headers.forEach((header, index) => {
      rowMap[header] = row[index]; // Use header as key
      // If you prefer using column index instead of header:
      // rowMap[index] = row[index];
    });
    return rowMap;
  });

  const formattedData = data1.map(row => {
  return {
    DATE: Utilities.formatDate(row["DATE"], Session.getScriptTimeZone(), "yyyy-MM-dd"), 
    MODEL: row["MODEL"], 
    CONO: row["PLATE/CO.NO"], 
    HOUR: row["HOUR"], 
    TYPE: row["TYPE"]
  };
});
  return JSON.stringify(formattedData);
}
